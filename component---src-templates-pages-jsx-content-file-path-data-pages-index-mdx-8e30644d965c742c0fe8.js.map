{"version":3,"file":"component---src-templates-pages-jsx-content-file-path-data-pages-index-mdx-8e30644d965c742c0fe8.js","mappings":"iJAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,OAAQ,WACPC,EAAAA,EAAAA,MAAsBZ,EAAMa,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBb,EAAYG,GAAI,KAAM,cAAe,KAAMU,EAAAA,cAAoBb,EAAYI,GAAI,KAAM,cAAe,KAAMS,EAAAA,cAAoBb,EAAYK,GAAI,KAAM,cAAe,KAAMQ,EAAAA,cAAoBb,EAAYM,GAAI,KAAM,cAAe,KAAMO,EAAAA,cAAoBb,EAAYO,GAAI,KAAM,KAAMM,EAAAA,cAAoBb,EAAYQ,GAAI,KAAM,KAAMK,EAAAA,cAAoBb,EAAYS,EAAG,KAAM,wDAAyD,MAAO,KAAMI,EAAAA,cAAoBb,EAAYQ,GAAI,KAAM,KAAMK,EAAAA,cAAoBb,EAAYS,EAAG,KAAM,oCAAqC,MAAO,KAAMI,EAAAA,cAAoBb,EAAYQ,GAAI,KAAM,KAAMK,EAAAA,cAAoBb,EAAYS,EAAG,KAAM,YAAaI,EAAAA,cAAoBb,EAAYU,OAAQ,KAAM,YAAa,iBAAkB,MAAO,MACn0B,CAKA,IAJA,SAAoBX,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGS,EAAAA,EAAAA,MAAsBZ,EAAMa,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWhB,EAAOc,EAAAA,cAAoBf,EAAmBC,IAAUD,EAAkBC,EAC9H,C,gICbA,MAAMiB,EAAYC,IAAsB,IAArB,KAACC,EAAI,SAAEC,GAASF,EACnBC,EAAKE,IAAIC,YAAYC,MACnC,OAAOT,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBU,EAAAA,GAAa,KAAMJ,GAAU,EAGrF,SAASK,EAAiBzB,GACvC,OAAOc,EAAAA,cAAoBG,EAAWjB,EAAOc,EAAAA,cAAoBY,EAAAA,EAAqB1B,GACxF,CACO,MAAM2B,EAAOC,IAAA,IAAC,KAACT,GAAKS,EAAA,OAAKd,EAAAA,cAAoB,QAAS,KAAMK,EAAKE,IAAIC,YAAYC,MAAM,C,8FCmBvF,MAAMM,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBjB,GAC/B,MAAMkB,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfhB,EACFA,EAAWkB,GAGb,IAAIA,KAAsBlB,IAChC,CAACkB,EAAmBlB,GACzB,CAGA,MAAMmB,EAAc,CAAC,EAQd,SAASR,GAAY,WAACX,EAAU,SAAEO,EAAQ,qBAAEa,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfpB,EACHA,EAAW,CAAC,GACZA,GAAcmB,EAEJF,EAAiBjB,GAG5B,gBACLgB,EAAWM,SACX,CAACC,MAAOF,GACRd,EAEJ,C","sources":["webpack://chatbus_homepage/./data/pages/index.mdx","webpack://chatbus_homepage/./src/templates/pages.jsx","webpack://chatbus_homepage/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Hearder h1\"), \"\\n\", React.createElement(_components.h2, null, \"Hearder h2\"), \"\\n\", React.createElement(_components.h3, null, \"Hearder h3\"), \"\\n\", React.createElement(_components.h4, null, \"Hearder h4\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"챗은 둘 또는 여러사람이 온/오픈라인 대화를 포함하며, 문자/음성/파일 등을 포함할 수 있다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"버스는 컴퓨터간의 데이터와 정보를 전송하는 통신시스템이다.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"두개의 합성어로 \", React.createElement(_components.strong, null, \"대화를 연결하는\"), \" 통신 시스템을 뜻한다.\"), \"\\n\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/chatbus_homepage/chatbus_homepage/data/pages/index.mdx\";\nimport * as React from \"react\";\nimport {graphql} from 'gatsby';\nimport {MDXProvider} from \"@mdx-js/react\";\nimport {motion, useScroll, useTransform} from \"framer-motion\";\nimport {StaticImage} from \"gatsby-plugin-image\";\nconst IndexPage = ({data, children}) => {\n  const title = data.mdx.frontmatter.title;\n  return React.createElement(React.Fragment, null, React.createElement(MDXProvider, null, children));\n};\nIndexPage\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(IndexPage, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = ({data}) => React.createElement(\"title\", null, data.mdx.frontmatter.title);\nexport const query = graphql`\n  query ($id: String!) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n    `;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","h2","h3","h4","ul","li","p","strong","_provideComponents","components","React","wrapper","MDXLayout","IndexPage","_ref","data","children","mdx","frontmatter","title","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_ref2","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}